name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Capacitor CLI
      run: |
        npm install -g @capacitor/cli@latest
        
    - name: Install dependencies
      run: |
        npm install --force --no-package-lock
        
    - name: Build web app
      run: |
        # 确保dist目录存在并包含正确的文件
        mkdir -p dist
        cp random-timer.html dist/index.html
        # 复制manifest.json如果存在
        if [ -f "dist/manifest.json" ]; then
          echo "manifest.json already exists"
        else
          echo "manifest.json not found, but continuing..."
        fi
        ls -la dist/
        echo "Web app built successfully"
        
    - name: Sync Capacitor
      run: |
        # 先删除现有的android目录，让Capacitor重新生成
        if [ -d "android" ]; then
          echo "Removing existing android directory..."
          rm -rf android
        fi
        
        # 重新添加Android平台
        echo "Adding Android platform..."
        npx cap add android
        
        # 同步Web代码到Android项目
        echo "Syncing to Android..."
        npx cap sync android
        
        # 检查生成的文件
        echo "Checking generated Android files..."
        ls -la android/
        
        # 检查gradlew文件
        if [ -f "android/gradlew" ]; then
          echo "✅ gradlew file found and generated by Capacitor"
          ls -la android/gradlew
        else
          echo "❌ gradlew file not found"
        fi
        
    - name: Build Android APK
      run: |
        echo "Starting Android APK build..."
        
        # 进入android目录
        cd android
        
        # 检查目录内容
        echo "Android directory contents:"
        ls -la
        
        # 给予gradlew执行权限并构建
        if [ -f "gradlew" ]; then
          echo "✅ Found gradlew, setting permissions and building..."
          chmod +x gradlew
          ./gradlew assembleDebug --stacktrace --info
        else
          echo "❌ gradlew not found! Listing directory contents:"
          find . -name "gradlew*" -type f
          exit 1
        fi
        
    - name: Sign APK (Optional)
      run: |
        # 这里可以添加APK签名步骤
        echo "APK built successfully"
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        
    - name: Create Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🔔 随机提示音播放器 Android 版本
          
          ## 新功能
          - ✅ 支持后台运行，息屏不影响计时
          - ✅ 本地通知提醒
          - ✅ 震动反馈
          - ✅ 屏幕唤醒功能
          - ✅ 自定义音频文件支持
          - ✅ 内置多种提示音
          
          ## 安装说明
          1. 下载 APK 文件
          2. 在 Android 设备上安装
          3. 授予必要权限（通知、后台运行等）
          4. 享受无干扰的定时提醒功能
          
          自动构建版本 #${{ github.run_number }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: android/app/build/outputs/apk/debug/app-debug.apk
        asset_name: random-timer-v${{ github.run_number }}.apk
        asset_content_type: application/vnd.android.package-archive